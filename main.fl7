@STRICT;

lib : {

  parse : [
    0 : () -> lib.parse("Argument Error");
    1 : usage -> lib.parse(usage; [ARGS]);
    2 : usage, list_arg -> (
      print_usage : \(
        usage => ERR;
        EXIT(1);
      );

      list_arg_2 : list_arg;

      list_param : [];
      WHILE(\($#list_arg_2 > 0)) | (continue:(
        arg : list_arg_2.0;
        list_arg_2 = list_arg_2[1; ];

        # --key=value
        m : arg =~ /^--(.+?)=(.*)$/;
        m && (
          key : m.1;
          value : m.2;
          list_param[$#list_param] = [key, value];
          continue := ();
        );

        # ++key
        m : arg =~ /^\+\+(.+)$/;
        m && (
          key : m.1;
          list_param[$#list_param] = [key, TRUE];
          continue := ();
        );

        # --key value
        m : arg =~ /^--(.+)$/;
        m && (
          key : m.1;
          $#list_arg_2 <= 0 && print_usage();
          value : list_arg_2.0;
          list_arg_2 = list_arg_2[1; ];
          list_param[$#list_param] = [key, value];
          continue := ();
        );

        # +abc
        m : arg =~ /^\+([a-zA-Z0-9]+)$/;
        m && (
          m.1[] | list_param[$#list_param] = [_, TRUE];
          continue := ();
        );

        # -k value
        m : arg =~ /^-([a-zA-Z0-9])$/;
        m && (
          key : m.1;
          $#list_arg_2 <= 0 && print_usage();
          value : list_arg_2.0;
          list_arg_2 = list_arg_2[1; ];
          list_param[$#list_param] = [key, value];
          continue := ();
        );

        # value
        list_param[$#list_param] = ["_", arg];

      ));

      map_param : {[list_param[] => GROUP_BY >> \_.0 | {(_.0.0) : [_[] | _.1]}[]]};

      "_" @@ map_param || (map_param._ = []);

      map_param
    );
  ];

};
lib
